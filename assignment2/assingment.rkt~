#lang racket
(require "declarations.rkt")
(require "utilities.rkt")

;(provide (struct-out E) (struct-out L) (struct-out O) (struct-out T)
;         (struct-out S) (struct-out Epsilon) (struct-out Literal) 
;         (struct-out Or)(struct-out Then) (struct-out Star) 
;         (struct-out Graph) (struct-out Trans))
;
;
;
;; Defining a new type for Regular expressions
;
;(struct E() #:transparent)
;(struct L(c) #:transparent)
;(struct O(r1 r2) #:transparent)
;(struct T(r1 r2) #:transparent)
;(struct S(r) #:transparent)
;
;; Defining a new type for syntax tree formed out of Regular expressions
;
;(struct Epsilon (n) #:transparent)
;(struct Literal (c n) #:transparent)
;(struct Or (t1 t2 n) #:transparent)
;(struct Then (t1 t2 n) #:transparent)
;(struct Star (t n) #:transparent)
;
;;Structure of Graph
;
;(struct Graph(greennode nodes trans  rednodes symbols) #:transparent)
;
;;Structure of a transition
;
;(struct Trans(start sym final) #:transparent)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;#lang racket
;(require parser-tools/lex
;         parser-tools/yacc)
;;(require "declarations.rkt")
;(provide (all-defined-out))
;
;;main functions being exported are
;;maketree and matches?
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;;;Akash Code
;
;(define (reNumber t l)
;  (cond [(Epsilon? t) (Epsilon (+ (Epsilon-n t) l))]
;        [(Literal? t) (Literal (Literal-c t) (+ (Literal-n t) l))]
;        [(Or? t)
;         (let ([t1 (reNumber (Or-t1 t) l)]
;               [t2 (reNumber (Or-t2 t) l)])
;           (Or t1 t2 (+ (Or-n t) l)))]
;        [(Then? t)
;         (let ([t1 (reNumber (Then-t1 t) l)]
;               [t2 (reNumber (Then-t2 t) l)])
;           (Then t1 t2 (+ (Then-n t) l)))]
;        [(Star? t)
;         (let ([t1 (reNumber (Star-t t) l)])
;           (Star t1 (+ (Star-n t) l)))]))
;
;
;(define (buildTreeHelper r n)
;  (cond [(E? r) (cons 1 (Epsilon 1))]
;        [(L? r) (cons 1 (Literal (L-c r) 1))]
;        [(O? r)
;         (let* ([pr1 (buildTreeHelper (O-r1 r) 0)]
;                [pr2 (buildTreeHelper (O-r2 r) 0)]
;                [t2 (reNumber (cdr pr2) (car pr1))]
;                [sub-tree (Or (cdr pr1) t2 (+ 1 (car pr1) (car pr2)))])
;           (cons (+ (car pr1) (car pr2) 1) (reNumber sub-tree n)))]
;        [(T? r)
;         (let* ([pr1 (buildTreeHelper (T-r1 r) 0)]
;                [pr2 (buildTreeHelper (T-r2 r) 0)]
;                [t2 (reNumber (cdr pr2) (car pr1))]
;                [sub-tree (Then (cdr pr1) t2 (+ 1 (car pr1) (car pr2)))])
;           (cons (+ (car pr1) (car pr2) 1) (reNumber sub-tree n)))]
;        [(S? r)
;         (let* ([pr1 (buildTreeHelper (S-r r) 0)]
;                [sub-tree (Star (cdr pr1) (+ 1 (car pr1)))])
;           (cons (+ (car pr1) 1) (reNumber sub-tree n)))]))
;
;
;
;(define (buildTree r)
;  (cdr (buildTreeHelper r 0)))
;
;(define (getNodeNumber t)
;  (cond [(Epsilon? t) (Epsilon-n t)]
;        [(Literal? t) (Literal-n t)]
;        [(Then? t) (Then-n t)]
;        [(Or? t) (Or-n t)]
;        [(Star? t) (Star-n t)]))
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;;;Sheshansh code
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;(define (final-initialise-helper greennode  rednodes)
;  (if (> (count (curry equal? greennode) rednodes) 0)
;      greennode
;      -1))
;
;(define (eof-to-hash character) (if (eof-object? character) #\# character))
;
;(define (search-in-list item list) (> (count (curry equal? item) list) 0))
;
;(define (find-next-state trans state nextchar)
;  (cond [(eq? state empty ) empty]
;        [else (let* ([item-containing
;                      (findf (lambda (arg)
;                               (and
;                                (equal? (Trans-start arg) state)
;                                (equal? (Trans-sym arg) nextchar)))
;                             trans)])
;                (if item-containing (Trans-final item-containing) empty))]))
;
;(define (matches? graph input-string)
;  (let*
;      ([symbols (Graph-symbols graph)]
;       [trans (Graph-trans graph)]
;       [state (Graph-greennode graph)]
;       [final (final-initialise-helper state (Graph-rednodes graph))]
;       [input (open-input-string input-string)]
;       [nextchar (string (eof-to-hash (read-char input)))]
;       [driver-helper
;        ((lambda (x) (x x))
;         (lambda (driver-helper-recursive)
;           (lambda ()
;             (if (equal? nextchar "#")
;                 (if (search-in-list state (Graph-rednodes graph))
;                     "Regex and string match"
;                     "Regex and string don't match")
;                 (if (search-in-list nextchar symbols)
;                     (let*
;                         ([nextstate (find-next-state trans state nextchar)])
;                       (set! state nextstate)
;                       (let* ([initialchar nextchar])
;                         (set! nextchar (string (eof-to-hash (read-char input))))
;                                   
;                         ((driver-helper-recursive driver-helper-recursive))))
;                     (string-append "This character not in symbols of regex : " nextchar))))))]
;       )
;    (driver-helper)))
;
;(define-tokens tokens_a (CHAR))
;(define-empty-tokens tokens_b (* @ \| EOF \( \) ))
;
;(define simple-regex-lexer
;           (lexer
;            ((union (char-range "A" "Z")
;                    (char-range "a" "z"))
;             (token-CHAR lexeme))
;            ("*" (token-*))
;            ("|" (token-\|))
;            ("(" (token-\())
;            (")" (token-\)))
;            ("@" (token-@))
;            ;; recursively calls the lexer which effectively skips whitespace
;            (whitespace (simple-regex-lexer input-port))
;;            ("eps" (token-epsilon))
;            ((eof) (token-EOF))))
;
;                 
;(define simple-regex-parser
;           (parser
;            (start regexp)
;            (end EOF)
;            (error void)
;            (tokens tokens_a tokens_b)
;            (precs (left \|)
;                   (nonassoc *)
;                   (nonassoc \( \)))
;            (grammar
;             (regexp ((regexp \| regexp_withoutor) (O $1 $3))
;                     ((regexp_withoutor) $1))
;             (regexp_withoutor
;              ((@) (E))
;              (() void)
;              ((regexp_withoutor \( regexp \))
;               (if (eq? void $1) $3 (T $1 $3)))
;              ((regexp_withoutor CHAR)
;               (if (eq? void $1) (L $2) (T $1 (L $2))))
;              ((regexp_withoutor \( regexp \) *)
;               (if (eq? void $1) (S $3) (T $1 (S $3))))
;              ((regexp_withoutor @)
;               (if (eq? void $1) (E) (T $1 (E))))
;              ((regexp_withoutor CHAR *)
;               (if (eq? void $1) (S (L $2)) (T $1 (S (L $2)))))))))
;
;(define (lex-this lexer input) (lambda () (lexer input)))
;
;(define (regex-parser regex-string)
;  (simple-regex-parser
;   (lex-this simple-regex-lexer (open-input-string regex-string))))
;
;(define (maketree regexp-string)
;  (let* ([regexp (regex-parser regexp-string)]
;         [regexpWithHash (T regexp (L "#"))]
;         [tree (buildTree regexpWithHash)])
;    tree))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;(define (buildNullable t)
 ; (define p null)
 ; (cond [(null? 
 (define x (maketree "(a|b)*bba|cc*")) 

(define (buildNullable t)
  (define (helper t)
  (cond[(null? t) '()]
    [(Epsilon? t) (list (Epsilon-n t) t)]
       [(Literal? t)  (list (list (Literal-n t) #f))]
       [(Or? t) (if (or (eq? (cadr (car (helper (Or-t1 t)))) #t) (eq? (cadr (car (helper (Or-t2 t)))) #t)) (append (list (list (Or-n t) #t)) (helper (Or-t1 t)) (list (helper (Or-t2 t))))
                   (append  (list (list (Or-n t) #f)) (helper (Or-t1 t))  (helper (Or-t2 t))))]
       [(Then? t) (if (and (eq? (cadr (car (helper (Then-t1 t)))) #t) (eq? (cadr (car (helper (Then-t2 t)))) #t)) (append (list (list (Then-n t) #t))  (helper (Then-t1 t)) (helper (Then-t2 t)))
                   (append (list (list (Then-n t) #f))  (helper (Then-t1 t)) (helper (Then-t2 t))))]
       
       [(Star? t) (append (list (list (Star-n t) #t)) (helper (Star-t t)))]))
  (helper t))
(define t (maketree "a|b"))
(define l (maketree  "(a|b)*bba | cc*"))
(define (buildFirstpos t)
   (define (helper1 t)
    ( cond[(Epsilon? t) (list "phi")]
        [(Literal? t) (list (Literal-n t) )]
        [(Or? t) (append  ( helper1 (Or-t1 t)) (helper1 (Or-t2 t)))]
        [(Then? t) (if (eq? (nullable1 (Then-t1 t)) #t) (append (helper1 (Then-t1 t)) (helper1 (Then-t2 t)))
                               (helper1 (Then-t1 t)))]
        [(Star? t) (helper1 (Star-t t))] ))
  (define (nullable1 t)
    (if (or (Epsilon? t) (Star? t)) #t
        #f))
  (cond[(null? t) '()]
    [(Literal? t) (list (append  (list (Literal-n t)) (helper1 t)))]
       [(Or? t) (append (list (append (list (Or-n t)) (helper1 t))) (buildFirstpos (Or-t1 t)) (buildFirstpos (Or-t2 t)))]
       [(Then? t) (append (list (append (list (Then-n t)) (helper1 t))) (buildFirstpos (Then-t1 t)) (buildFirstpos (Then-t2 t)))]
       [(Star? t) (append (list (append (list (Star-n t)) (helper1 t))) (buildFirstpos (Star-t t)))]))
 (define (buildLastpos t)
  
   (define (helper t)
     (cond[(Epsilon? t) (list "phi")]
          [(Literal? t) (list (Literal-n t))]
          [(Or? t) (append (helper (Or-t1 t)) (helper (Or-t2 t)))]
          [(Then? t) (if (eq? (nullable1 (Then-t2 t)) #t) (append (helper (Then-t1 t)) (helper (Then-t2 t)))
                         (helper (Then-t2 t)))]
          [(Star? t) (helper (Star-t t))]))
    (define (nullable1 t1)
    (if (or (Epsilon? t1) (Star? t1)) #t
        #f))
   (cond[(Epsilon? t) (list '())]
        [(Literal? t) (list (append  (list (Literal-n t)) (helper t)))]
       [(Or? t) (append (list (append (list (Or-n t)) (helper t))) (buildLastpos (Or-t1 t)) (buildLastpos (Or-t2 t)))]
       [(Then? t) (append (list (append (list (Then-n t)) (helper t))) (buildLastpos (Then-t1 t)) (buildLastpos (Then-t2 t)))]
       [(Star? t) (append (list (append (list (Star-n t)) (helper t))) (buildLastpos (Star-t t)))]))

   
 (define y (maketree "@"))
;(define (buildFollowpos t)
 ; (define (helper k)
 ; (cond[(Literal? 
